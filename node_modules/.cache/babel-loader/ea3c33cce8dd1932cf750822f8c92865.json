{"ast":null,"code":"var _jsxFileName = \"/home/sl/Desktop/Project4/New Folder/Robofriends2/src/index.js\",\n    _s = $RefreshSig$();\n\nimport { React, CSSProperties, useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport './index.css';\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport App from \"./App\";\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet [loading, setLoading] = useState(true);\nlet [color, setColor] = useState(\"#ffffff\");\n\nconst LoadingIndicator = props => {\n  _s();\n\n  const {\n    promiseInProgress\n  } = usePromiseTracker();\n  return promiseInProgress && /*#__PURE__*/_jsxDEV(ClipLoader, {\n    color: color,\n    loading: loading,\n    cssOverride: override,\n    size: 150,\n    \"aria-label\": \"Loading Spinner\",\n    \"data-testid\": \"loader\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n};\n\n_s(LoadingIndicator, \"KTo1xiutw/iZHt+hlD1avyNKva4=\", false, function () {\n  return [usePromiseTracker];\n});\n\n_c = LoadingIndicator;\nReactDOM.createRoot(document.getElementById('root')).render( /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 29,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingIndicator\");","map":{"version":3,"names":["React","CSSProperties","useState","ReactDOM","ClipLoader","usePromiseTracker","App","reportWebVitals","loading","setLoading","color","setColor","LoadingIndicator","props","promiseInProgress","override","createRoot","document","getElementById","render"],"sources":["/home/sl/Desktop/Project4/New Folder/Robofriends2/src/index.js"],"sourcesContent":["import {React,CSSProperties,useState} from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport './index.css';\nimport { usePromiseTracker } from \"react-promise-tracker\";\n\nimport App from \"./App\"\nimport 'tachyons';\n\nimport reportWebVitals from './reportWebVitals';\nlet [loading, setLoading] = useState(true);\nlet [color, setColor] = useState(\"#ffffff\");\n const LoadingIndicator = props => {\n  const { promiseInProgress } = usePromiseTracker();\n     return (\n      promiseInProgress && \n      <ClipLoader\n        color={color}\n        loading={loading}\n        cssOverride={override}\n        size={150}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    );  \n  }\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <div>\n    <App />\n    <LoadingIndicator/>\n  </div>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";;;AAAA,SAAQA,KAAR,EAAcC,aAAd,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAO,aAAP;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,UAAP;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AACA,IAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAApC;AACA,IAAI,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,SAAD,CAAhC;;AACC,MAAMU,gBAAgB,GAAGC,KAAK,IAAI;EAAA;;EACjC,MAAM;IAAEC;EAAF,IAAwBT,iBAAiB,EAA/C;EACG,OACCS,iBAAiB,iBACjB,QAAC,UAAD;IACE,KAAK,EAAEJ,KADT;IAEE,OAAO,EAAEF,OAFX;IAGE,WAAW,EAAEO,QAHf;IAIE,IAAI,EAAE,GAJR;IAKE,cAAW,iBALb;IAME,eAAY;EANd;IAAA;IAAA;IAAA;EAAA,QAFD;AAWF,CAbF;;GAAMH,gB;UACyBP,iB;;;KADzBO,gB;AAePT,QAAQ,CAACa,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,EAAqDC,MAArD,eACE;EAAA,wBACE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA,QADF,eAEE,QAAC,gBAAD;IAAA;IAAA;IAAA;EAAA,QAFF;AAAA;EAAA;EAAA;EAAA;AAAA,QADF,E,CAOA;AACA;AACA;;AACAZ,eAAe"},"metadata":{},"sourceType":"module"}